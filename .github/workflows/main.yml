name: Build and Deploy APK

permissions:
  contents: write

on: [push]
jobs:
  linux_build:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        architecture:
          [amd64, arm64, armel, armhf, i386, powerpc, ppc64el, riscv64, s390x]
        include:
          - platform: x86_64-unknown-linux-gnu
            architecture: amd64
            toolchain: stable
          - platform: aarch64-unknown-linux-gnu
            architecture: arm64
            toolchain: stable
          - platform: arm-unknown-linux-gnueabi
            architecture: armel
            toolchain: stable
          - platform: armv7-unknown-linux-gnueabihf
            architecture: armhf
            toolchain: stable
          - platform: i686-unknown-linux-gnu
            architecture: i386
            toolchain: stable
          - platform: mips-unknown-linux-gnu
            architecture: mips
            toolchain: stable
          - platform: mips64-unknown-linux-gnuabi64
            architecture: mips64
            toolchain: stable
          - platform: mips64el-unknown-linux-gnuabi64
            architecture: mips64el
            toolchain: stable
          - platform: mips64-unknown-linux-mips64r6
            architecture: mips64r6
            toolchain: stable
          - platform: mips64el-unknown-linux-mips64r6
            architecture: mips64r6el
            toolchain: stable
          - platform: mipsel-unknown-linux-gnu
            architecture: mipsel
            toolchain: stable
          - platform: mips-unknown-linux-mipsr6
            architecture: mipsr6
            toolchain: stable
          - platform: mipsel-unknown-linux-mipsr6
            architecture: mipsr6el
            toolchain: stable
          - platform: powerpc-unknown-linux-gnu
            architecture: powerpc
            toolchain: stable
          - platform: powerpc64le-unknown-linux-gnu
            architecture: ppc64el
            toolchain: stable
          - platform: riscv64gc-unknown-linux-gnu
            architecture: riscv64
            toolchain: stable
          - platform: s390x-unknown-linux-gnu
            architecture: s390x
            toolchain: stable

    steps:
      - name: Install 32-bit libraries
        if: matrix.architecture == 'i386'
        run: sudo apt-get update && sudo apt-get install gcc-multilib

      - name: Install aarch64 toolchain
        if: matrix.platform == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          echo "TARGET_CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "TARGET_CXX=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Install packages
        run: |
          sudo apt-get update
          sudo apt-get upgrade
          sudo apt-get install -y automake autoconf libtool crossbuild-essential-${{ matrix.architecture }}

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Add Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          target: ${{ matrix.platform }}
          default: true

      - name: Build on Linux for ${{ matrix.architecture }}
        run: |
          cargo build --release --target ${{ matrix.platform }}

      - name: Move Linux binary to output directory
        run: |
          mkdir -p linux-binary/${{ matrix.architecture }}
          cp ./target/${{ matrix.platform }}/release/jintemplify linux-binary/${{ matrix.architecture }}/jintemplify-${{ matrix.architecture }}
      - name: Upload Linux artifact
        uses: actions/upload-artifact@v2
        with:
          name: linux-binary-${{ matrix.architecture }}
          path: linux-binary/${{ matrix.architecture }}/jintemplify-${{ matrix.architecture }}
          if-no-files-found: error
          retention-days: 7

  apline_build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Build APK package inside Alpine container
        run: |
          docker run --rm -v $(pwd):/workspace -v $(pwd)/output:/home/builder/packages -w /workspace alpine:latest /bin/ash -c "\
            apk add alpine-sdk cargo && \
            adduser -D -G abuild builder && \
            chown -R builder /workspace && \
            chown -R builder /var/cache/distfiles/ && \
            su builder -c 'abuild-keygen -a -n' && \
            cp /home/builder/.abuild/*.rsa.pub /etc/apk/keys/ && \
            su builder -c 'abuild checksum' && \
            su builder -c 'abuild -r'
          "
          tree $(pwd)/output/
      - name: Upload Alpine APK
        uses: actions/upload-artifact@v2
        with:
          name: alpine-apk
          path: ./output/x86_64/jintemplify-*.apk
          if-no-files-found: error
          retention-days: 7

  macos_build:
    runs-on: macOS-latest

    strategy:
      matrix:
        architecture: [x86_64, arm64]
        include:
          - platform: x86_64-apple-darwin
            architecture: x86_64
          - platform: aarch64-apple-darwin
            architecture: arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Build on macOS for ${{ matrix.architecture }}
        run: |
          rustup target add ${{ matrix.platform }}
          cargo build --release --target ${{ matrix.platform }}

      - name: Move macOS binary to output directory
        run: |
          mkdir -p payload/usr/local/bin/
          cp ./target/${{ matrix.platform }}/release/jintemplify payload/usr/local/bin/
          VERSION=$(grep version Cargo.toml | head -1 | awk '{print $3}' | tr -d '"')
          echo "pkgbuild version=${VERSION}"
          pkgbuild --root payload --identifier com.supercoolai.jintemplify --version $VERSION jintemplify-${{ matrix.architecture }}.pkg

      - name: Upload macos artifact
        uses: actions/upload-artifact@v2
        with:
          name: macos-binary-${{ matrix.architecture }}
          path: jintemplify-${{ matrix.architecture }}.pkg
          if-no-files-found: error
          retention-days: 7

  windows_build:
    runs-on: windows-latest

    strategy:
      matrix:
        architecture: [amd64, i386]
        include:
          - platform: x86_64-pc-windows-msvc
            architecture: amd64
          - platform: i686-pc-windows-msvc
            architecture: i386

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Add Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.platform }}
          default: true

      - name: Build on Windows for ${{ matrix.architecture }}
        run: |
          cargo build --release --target ${{ matrix.platform }}

      - name: Move Windows binary to output directory
        run: |
          mkdir output
          cp ./target/${{ matrix.platform }}/release/jintemplify.exe output/jintemplify-${{ matrix.architecture }}.exe

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v2
        with:
          name: windows-binary-${{ matrix.architecture }}
          path: output/jintemplify-${{ matrix.architecture }}.exe
          if-no-files-found: error
          retention-days: 7

  dist:
    needs: [macos_build, apline_build, windows_build, linux_build]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v2

      - name: upload-artifacts
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            ./alpine-apk/jintemplify-*.apk
            ./macos-binary-x86_64/jintemplify-*.pkg
            ./macos-binary-arm64/jintemplify-*.pkg
            ./windows-binary-amd64/jintemplify-*.exe
            ./windows-binary-i386/jintemplify-*.exe
            ./linux-binary/jintemplify-*
          tag_name: ${{ github.ref }}
